"==========================================
" vimrc bundles
"==========================================

" dependency
" ycm:  ctags, ag (the_silver_searcher)
" python:   pep8, pyflake

" disable vi mode
set nocompatible
filetype off " required! turn off

" inspired by spf13, bundle group
if !exists('g:bundle_groups')
    let g:bundle_groups=['c', 'tmux', 'python']
endif

" vim plugin bundle control, command model
call plug#begin('~/.vim/bundle')

" syntastic
if v:version < 800
    Plug 'scrooloose/syntastic'
else
    Plug 'w0rp/ale'
endif

" vim_snippets depends on ultisnips
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" YouCompleteMe
" cheat: restart: YcmRestartServer
Plug 'Valloric/YouCompleteMe'

" delimitMate
Plug 'Raimondi/delimitMate'

" nerdcommenter
Plug 'scrooloose/nerdcommenter'

" quick surround
" for repeat -> enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'

" trailing_whitespace
Plug 'bronson/vim-trailing-whitespace'

" easyalign
Plug 'junegunn/vim-easy-align'

" multiple_cursors
Plug 'terryma/vim-multiple-cursors'

" airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" rainbow_parentheses
Plug 'kien/rainbow_parentheses.vim'

" nerdtree nerdtree_tabs
Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs'

" ctrlspace
Plug 'vim-ctrlspace/vim-ctrlspace'

" tagbar
Plug 'majutsushi/tagbar'

" git_fugitive
Plug 'tpope/vim-fugitive'

" linux_coding_style
Plug 'vivien/vim-linux-coding-style'

" vim signature/mark/label
Plug 'kshenoy/vim-signature'

" ifdef_highlighting
Plug 'vim-scripts/ifdef-highlighting'

" fzf fuzz search
Plug '~/.fzf'

" better syntax highlighting
Plug 'sheerun/vim-polyglot'

" solarized color scheme
Plug 'altercation/vim-colors-solarized'

" grubbox color scheme
Plug 'morhetz/gruvbox'

" git_blame in status line
Plug 'zivyangll/git-blame.vim'

if count(g:bundle_groups, 'tmux')
    " tmux navigator Ctrl-hjkl
    Plug 'christoomey/vim-tmux-navigator'
endif

if count(g:bundle_groups, 'python')
    " python syntax highlight
    Plug 'hdima/python-syntax'
    Plug 'hynek/vim-python-pep8-indent'
    Plug 'Glench/Vim-Jinja2-Syntax'

    " isort
    " https://github.com/timothycrosley/isort#readme
    " https://github.com/fisadev/vim-isort#installation
    " pip install isort
    Plug 'fisadev/vim-isort'
    " hot key: select: Shift-v
    " hot key: sort: Ctrl-i
    let g:vim_isort_map = '<C-i>'
endif

if count(g:bundle_groups, 'json')
    Plug 'elzr/vim-json', {'for': 'json'}
endif

" add plugins to &runtimepath
call plug#end()

" syntastic {{{
if has_key(g:plugs, 'syntastic')
    " dependence
    " shellcheck `brew install shellcheck` https://github.com/koalaman/shellcheck

    let g:syntastic_error_symbol='✗'
    let g:syntastic_warning_symbol='⚠'
    let g:syntastic_check_on_open=1
    let g:syntastic_check_on_wq=0
    let g:syntastic_enable_highlighting=1

    " checkers
    " python
    " pip install flake8
    " let g:syntastic_python_checkers = ['pylint', 'flake8', ]
    let g:syntastic_python_checkers=['flake8', ]
    let g:syntastic_python_flake8_args='--ignore=E124 --max-line-length=120'

    " checkers
    " cpp
    " g++, c++11
    let g:syntastic_cpp_compiler='g++'
    let g:syntastic_cpp_compiler_options=' -std=c++11 -stdlib=libc++ '

    " see error location list
    let g:syntastic_always_populate_loc_list=1
    let g:syntastic_enable_signs=1
    let g:syntastic_auto_loc_list=0
    let g:syntastic_auto_jump=0
    let g:syntastic_loc_list_height=5

    function! ToggleErrors()
        let old_last_winnr=winnr('$')
        lclose
        if old_last_winnr == winnr('$')
            " nothing was closed, open syntastic_error location panel
            Errors
        endif
    endfunction
    nnoremap <Leader>el :call ToggleErrors()<cr>

    " <leader>en and <leader>ep to jump between errors
    function! <SID>LocationPrevious()
    try
        lprev
    catch /^Vim\%((\a\+)\)\=:E553/
        llast
    endtry
    endfunction

    function! <SID>LocationNext()
    try
        lnext
    catch /^Vim\%((\a\+)\)\=:E553/
        lfirst
    endtry
    endfunction

    nnoremap <silent> <Plug>LocationPrevious    :<C-u>exe 'call <SID>LocationPrevious()'<CR>
    nnoremap <silent> <Plug>LocationNext        :<C-u>exe 'call <SID>LocationNext()'<CR>
    nmap <silent> <Leader>ep    <Plug>LocationPrevious
    nmap <silent> <Leader>en    <Plug>LocationNext

    " modify highlight background color to fit theme
    " FIXME
    highlight SyntasticErrorSign guifg=white guibg=black

    " thanks to @marsqing, see https://github.com/wklken/k-vim/issues/164
    let g:syntastic_mode_map={'mode': 'active', 'passive_filetypes': ['c', 'cpp', 'java'] }

    " hot key: disable syntastic
    nnoremap <silent> <Leader>ec :SyntasticToggleMode<CR>
endif
" }}}


" ale {{{
if has_key(g:plugs, 'ale')
    " yum install ShellCheck
    " pip install pylint flake8
    " pip install gitlint
    " pip install yamllint
    " pip install cmakelint
    " npm install -g eslint eslint-plugin-standard eslint-plugin-promise eslint-config-standard eslint-plugin-import eslint-plugin-node eslint-plugin-html babel-eslint
    " npm install -g markdownlint
    " manually install checkmake
    let g:ale_linters={
    \   'python': ['flake8'],
    \   'javascript': ['eslint'],
    \}
    " pylint doc: pylint --list-msgs or pylint --help
    " missing-docstring (C0111): *Missing %s docstring*
    " relative-import (W0403): *Relative import %r, should be %r*
    " no-self-use (R0201): *Method could be a function*
    " too-many-instance-attributes (R0902): *Too many instance attributes (%s/%s)*
    " too-few-public-methods (R0903): *Too few public methods (%s/%s)*
    " too-many-public-methods (R0904): *Too many public methods (%s/%s)*
    let g:ale_python_pylint_options='--disable=C0111,W0403,R0201,R0902,R0903,R0904 --max-line-length=120 --variable-naming-style=any --const-naming-style=any --argument-naming-style=any'

    " pep8 doc: http://pep8.readthedocs.io/en/latest/intro.html#error-codes
    " E123 closing bracket does not match indentation of opening bracket’s line
    " E124 closing bracket does not match visual indentation
    " E125 continuation line with same indent as next logical line
    " E126 continuation line over-indented for hanging indent
    " E127 continuation line over-indented for visual indent
    " E128 continuation line under-indented for visual indent
    " E302 expected 2 blank lines, found 0
    let g:ale_python_flake8_options='--ignore=E123,E124,E125,E126,E127,E128,E302 --max-line-length=120'

    let g:ale_set_highlights=1
    let g:ale_sign_error='✗'
    let g:ale_sign_warning='⚠'

    let g:airline#extensions#ale#enabled=0
    let g:ale_statusline_format=['⨉ %d', '⚠ %d', '⬥ ok']
    let g:ale_echo_msg_error_str='E'
    let g:ale_echo_msg_warning_str='W'
    let g:ale_echo_msg_format='[%linter%] %s [%severity%]'

    nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
    nmap <silent> <Leader>en <Plug>(ale_next_wrap)
    nnoremap <silent> <Leader>ec :ALEToggle<CR>

    " troggle quickfix list
    function! ToggleErrors()
        let old_last_winnr = winnr('$')
        lclose
        if old_last_winnr == winnr('$')
            " nothing was closed, open syntastic_error location panel
            lopen
        endif
    endfunction
    nnoremap <Leader>el :call ToggleErrors()<cr>
endif
" }}}

" YouCompleteMe {{{
    " YCM default tab conflicts with s-tab
    let g:ycm_key_list_select_completion=['<C-j>', '<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion=['<C-k>', '<C-p>', '<Up>']
    let g:ycm_complete_in_comments=1
    let g:ycm_complete_in_strings=1
    let g:ycm_use_ultisnips_completer=1
    let g:ycm_collect_identifiers_from_comments_and_strings=1
    let g:ycm_collect_identifiers_from_tags_files=1
    " enable syntax auto-complete
    let g:ycm_seed_identifiers_with_syntax=1
    " select with enter
    let g:ycm_key_list_stop_completion=['<CR>']

    " enable keywork auto-complete
    let g:ycm_seed_identifiers_with_syntax=1

    " disable syntastic_check in youcompleteme
    let g:ycm_show_diagnostics_ui=0

    " jump to definition in split window
    let g:ycm_goto_buffer_command='horizontal-split'
    let g:ycm_register_as_syntastic_checker=0
    " nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
    nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

    let g:ycm_confirm_extra_conf=0
    " old version
    if !empty(glob("~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py"))
        let g:ycm_global_ycm_extra_conf="~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py"
    endif
    " new version
    if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py"))
        let g:ycm_global_ycm_extra_conf="~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py"
    endif

    " trigger YCM in insert mode
    " let g:ycm_key_invoke_completion='<C-Space>'
    " blacklist
    let g:ycm_filetype_blacklist={
        \ 'tagbar' : 1,
        \}
" }}}

" ultisnips {{{
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
    let g:UltiSnipsSnippetDirectories=['UltiSnips']
    let g:UltiSnipsSnippetsDir='~/.vim/UltiSnips'
    let g:snips_author="Xu Yu"
    let g:snips_author_email="vatiminxuyu@gmail.com"
    " location: .vim/UltiSnips
    map <leader>us :UltiSnipsEdit<CR>

    " select with Ctrl-j/k
    func! g:JInYCM()
        if pumvisible()
            return "\<C-n>"
        else
            return "\<C-j>"
        endif
    endfunction

    func! g:KInYCM()
        if pumvisible()
            return "\<C-p>"
        else
            return "\<C-k>"
        endif
    endfunction
    inoremap <C-j> <C-r>=g:JInYCM()<CR>
    au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-r>=g:KInYCM()<CR>"
    let g:UltiSnipsJumpBackwordTrigger="<C-k>"
" }}}

" delimitMate {{{
    " optimization for python docstring
    au FileType python let b:delimitMate_nesting_quotes=['"']
" }}}

" nerdcommenter {{{
    let g:NERDSpaceDelims=1
    let g:NERDAltDelims_python=1
" }}}

" trailing_whitespace {{{
    map <leader><space> :FixWhitespace<cr>
" }}}

" easyalign {{{
    vmap <Leader>a <Plug>(EasyAlign)
    nmap <Leader>a <Plug>(EasyAlign)
    if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters={}
    endif
    let g:easy_align_delimiters['#']={ 'pattern': '#', 'ignore_groups': ['String'] }
    " default:
    " if a delimiter is in a highlight group whose name matches any of the followings, it will be ignored.
    let g:easy_align_ignore_groups=['Comment', 'String']
" }}}

" multiple_cursors {{{
    let g:multi_cursor_use_default_mapping=0
    " default mapping
    let g:multi_cursor_next_key='<C-m>'
    let g:multi_cursor_prev_key='<C-p>'
    let g:multi_cursor_skip_key='<C-x>'
    let g:multi_cursor_quit_key='<Esc>'
" }}}

" git_fugitive {{{
    nnoremap <leader>gb :Gblame<CR>
    nnoremap <leader>gs :Gstatus<CR>
    nnoremap <leader>gd :Gdiff<CR>
" }}}

" airline {{{
    if !exists('g:airline_symbols')
        let g:airline_symbols={}
    endif
    let g:airline_left_sep='▶'
    let g:airline_left_alt_sep='❯'
    let g:airline_right_sep='◀'
    let g:airline_right_alt_sep='❮'
    let g:airline_symbols.linenr='¶'
    let g:airline_symbols.branch='⎇'
    let g:airline#extensions#whitespace#enabled=0
    let g:airline#extensions#tabline#enabled=1
    let g:airline#extensions#tabline#fnamecollapse=1
    let g:airline#extensions#tabline#formatter='default'
" }}}

" rainbow_parentheses {{{
    " do not draw black parentheses
    " \ ['black',       'SeaGreen3'],
    let g:rbpt_colorpairs=[
        \ ['brown',       'RoyalBlue3'],
        \ ['Darkblue',    'SeaGreen3'],
        \ ['darkgray',    'DarkOrchid3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['brown',       'firebrick3'],
        \ ['gray',        'RoyalBlue3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['Darkblue',    'firebrick3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkcyan',    'SeaGreen3'],
        \ ['darkred',     'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]

    let g:rbpt_max=16
    let g:rbpt_loadcmd_toggle=0
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
" }}}

" solarized {{{
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    " let g:solarized_termcolors=256
" }}}

" nerdtree nerdtree_tabs {{{
    " map <leader>n :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " open file in split window: s/v
    let g:NERDTreeMapOpenSplit='s'
    let g:NERDTreeMapOpenVSplit='v'

    " nerdtree_tabs
    map <F7> <plug>NERDTreeTabsToggle<CR>
    " disable sync
    " let g:nerdtree_tabs_synchronize_view=0
    " let g:nerdtree_tabs_synchronize_focus=0
    " auto enable nerdtree
    " thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:nerdtree_tabs_open_on_gui_startup=0
" }}}

" ctrlspace {{{
    let g:airline_exclude_preview=1
    hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
    hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
    hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
    hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8
    nnoremap <silent> <Leader>f :CtrlSpace O<CR>
" }}}

" tagbar {{{
    nmap <F8> :TagbarToggle<CR>
    let g:tagbar_width=40
    let g:tagbar_autofocus=1
    let g:tagbar_left=1
    " let g:tagbar_autoshowtag=1
    " let g:tagbar_show_visibility=1
" }}}

" linux_coding_style {{{
   nnoremap <silent> <leader>ls :LinuxCodingStyle<CR>
   let g:linuxsty_patterns=[ "/usr/src/", "/media/nvme/qiyu.xy/kernel/" ]
" }}}

" python_syntax {{{
    let python_highlight_all=1
" }}}

" json {{{
    let g:vim_json_syntax_conceal=0
" }}}

" ifdef_highlighting {{{
    source ~/.vim/bundle/ifdef-highlighting/syntax/ifdef.vim
" }}}

" git_blame {{{
    nnoremap <Leader>b :<C-u>call gitblame#echo()<CR>
" }}}
